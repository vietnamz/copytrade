package daemon

import (
	"github.com/vietnamz/prime-generator/daemon/config"
	"testing"
)
// http://compoasso.free.fr/primelistweb/page/prime/liste_online_en.php
func TestUpperBoundSmall(t *testing.T) {
	p := newPrimeService(config.NewDaemonConfig())
	a, err := p.TakeLargestPrimesV2("12")
	if err != nil {
		t.Logf("There is an error %s", err.Error())
	}
	if a != "11" {
		t.Fatalf("expected: %v, actual: %v", "11", a)
	}
}

func TestUpperBoundSmall2(t *testing.T) {
	p := newPrimeService(config.NewDaemonConfig())
	a, err := p.TakeLargestPrimesV2("7920")
	if err != nil {
		t.Logf("There is an error %s", err.Error())
	}
	if a != "7919" {
		t.Fatalf("expected: %v, actual: %v", "11", a)
	}
}


func TestUpperBoundZero(t *testing.T) {
	p := newPrimeService(config.NewDaemonConfig())
	a, err := p.TakeLargestPrimesV2("0")
	if err != nil {
		t.Logf("There is an error %s", err.Error())
	}
	if a != "0" {
		t.Fatalf("expected: %v, actual: %v", "11", a)
	}
}

func TestUpperBoundInvalid(t *testing.T) {
	p := newPrimeService(config.NewDaemonConfig())
	a, err := p.TakeLargestPrimesV2("abc")
	if err != nil {
		t.Logf("There is an error %s", err.Error())
	}
	if a != "0" {
		t.Fatalf("expected: %v, actual: %v", "11", a)
	}
}


func TestUpperBoundLarge(t *testing.T) {
	p := newPrimeService(config.NewDaemonConfig())
	a, err := p.TakeLargestPrimesV2("982958340957")
	if err != nil {
		t.Logf("There is an error %s", err.Error())
	}
	if a != "982958340953" {
		t.Fatalf("expected: %v, actual: %v", "11", a)
	}
}

// https://primes.utm.edu/primes/blob_digits.php?id=117

func TestUpperBoundVeryLargest( t *testing.T) {
	p := newPrimeService(config.NewDaemonConfig())
	a, err := p.TakeLargestPrimesV2("1448710878603695229409412310732144622848441888753223448575120702981577542281415018652993561619563625768081760802164016332664868818287202677226268571177357443196189721711411095564550863916701456326047703907558905556769006452749568850893726964097212712534033673887482435571016493398875714661616695973805482073975013312603832180072496240990965064767802796335226649504512522482656310868574294571090894743593101737100996294180550347627991120402954521019478319594965583602635139406639554109668397505671888878121704968823589493631448107907114217361283249827317880226419193187177259109633935404301712464708823348328976497742932566121346081365525408595640468945290937758700039629256982005716182859284737841217145224064176914658186450842162070805962848366278043048270579195785338465402255311543317952316743397150239782344358067398630187697581974758378383164399938534007082923964046532198511555664094030236510446638373837514965653315445276132434900279652476100332956459885822293290144417509773544510283867826006224349987445172866722671938741506492171575030480586949013381712605577261029640924163986974030623538195577104997915377544237531482486437582261243814911374465420432886979360185662951101417810621647359742220813855302270079227324459422907061626612236531675332230997981115552142564940071988563230306482080972374909297566710962638028805")
	if err != nil {
		t.Logf("There is an error %s", err.Error())
	}
	if a != "1448710878603695229409412310732144622848441888753223448575120702981577542281415018652993561619563625768081760802164016332664868818287202677226268571177357443196189721711411095564550863916701456326047703907558905556769006452749568850893726964097212712534033673887482435571016493398875714661616695973805482073975013312603832180072496240990965064767802796335226649504512522482656310868574294571090894743593101737100996294180550347627991120402954521019478319594965583602635139406639554109668397505671888878121704968823589493631448107907114217361283249827317880226419193187177259109633935404301712464708823348328976497742932566121346081365525408595640468945290937758700039629256982005716182859284737841217145224064176914658186450842162070805962848366278043048270579195785338465402255311543317952316743397150239782344358067398630187697581974758378383164399938534007082923964046532198511555664094030236510446638373837514965653315445276132434900279652476100332956459885822293290144417509773544510283867826006224349987445172866722671938741506492171575030480586949013381712605577261029640924163986974030623538195577104997915377544237531482486437582261243814911374465420432886979360185662951101417810621647359742220813855302270079227324459422907061626612236531675332230997981115552142564940071988563230306482080972374909297566710962638028801" {
		t.Fatalf("expected: %v, actual: %v", "11", a)
	}
}

